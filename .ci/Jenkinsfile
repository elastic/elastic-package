#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/elastic-package"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL='INFO'
    AWS_ACCOUNT_SECRET = 'secret/observability-team/ci/elastic-observability-aws-account-auth'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|^\\/test$)')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Check the source code.
     */
    stage('Check') {
      steps {
        cleanup()
        withMageEnv(){
          withCloudTestEnv() {
            dir("${BASE_DIR}"){
              sh(label: 'Check',script: 'make check')
            }
          }
        }
      }
      post {
        always {
          dir("${BASE_DIR}") {
            archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/test-results/*.xml')
            archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/elastic-stack-dump/stack/logs/*.log')
            archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/elastic-stack-dump/check/logs/*.log')
            junit(allowEmptyResults: false,
                keepLongStdio: true,
                testResults: "build/test-results/*.xml")
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}

def withCloudTestEnv(Closure body) {
  def maskedVars = []
  // AWS
  def aws = getVaultSecret(secret: "${AWS_ACCOUNT_SECRET}").data
  if (!aws.containsKey('access_key')) {
    error("${AWS_ACCOUNT_SECRET} doesn't contain 'access_key'")
  }
  if (!aws.containsKey('secret_key')) {
    error("${AWS_ACCOUNT_SECRET} doesn't contain 'secret_key'")
  }
  maskedVars.addAll([
    [var: "AWS_ACCESS_KEY_ID", password: aws.access_key],
    [var: "AWS_SECRET_ACCESS_KEY", password: aws.secret_key],
  ])
  withEnvMask(vars: maskedVars) {
    body()
  }
}