#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = "elastic-package"

    BASE_DIR="src/github.com/elastic/elastic-package"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    GITHUB_TOKEN_CREDENTIALS = "2a9602aa-ab9f-4e52-baf3-b71ca88469c7"
    PIPELINE_LOG_LEVEL='INFO'
    AWS_ACCOUNT_SECRET = 'secret/observability-team/ci/elastic-observability-aws-account-auth'
    HOME = "${env.WORKSPACE}"
    KIND_VERSION = 'v0.11.1'
    K8S_VERSION = 'v1.23.0'
    JOB_GCS_BUCKET = 'beats-ci-temp'
    JOB_GCS_CREDENTIALS = 'beats-ci-gcs-plugin'
    JOB_GCS_EXT_CREDENTIALS = 'beats-ci-gcs-plugin-file-credentials'
    JOB_SIGNING_CREDENTIALS = 'sign-artifacts-with-gpg-job'
    INTERNAL_CI_JOB_GCS_CREDENTIALS = 'internal-ci-gcs-plugin'

    INFRA_SIGNING_BUCKET_NAME = 'internal-ci-artifacts'
    INFRA_SIGNING_BUCKET_ARTIFACTS_SUBFOLDER = "${env.REPO}/${env.BUILD_TAG}"
    INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER = "${env.INFRA_SIGNING_BUCKET_ARTIFACTS_SUBFOLDER}/signed-artifacts"
    INFRA_SIGNING_BUCKET_ARTIFACTS_PATH = "gs://${env.INFRA_SIGNING_BUCKET_NAME}/${env.INFRA_SIGNING_BUCKET_ARTIFACTS_SUBFOLDER}"
    INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.INFRA_SIGNING_BUCKET_NAME}/${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER}"

    INTEGRATIONS_SIGNATURES_PATH = 'build/integrations-elastic-signatures' // different path not to override signatures archived in the "build-zip" step
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Initializing'){
      options { skipDefaultCheckout() }
      stages {
        /**
        Checkout the code and stash it, to use it on other stages.
        */
        stage('Checkout') {
          steps {
            pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
            deleteDir()
            gitCheckout(basedir: "${BASE_DIR}")
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
          }
        }
        /**
        Check the source code.
        */
        stage('Check static') {
          steps {
            cleanup()
            dir("${BASE_DIR}"){
              withMageEnv(){
                sh(label: 'Check',script: 'make check-static')
              }
            }
          }
        }
        /**
        Run the unit tests suite
        */
        stage('Unit tests') {
          steps {
            cleanup()
            dir("${BASE_DIR}"){
              withMageEnv(){
                sh(label: 'Check',script: 'make test-go-ci')
              }
            }
          }
          post {
            always {
              dir("${BASE_DIR}") {
                archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/test-results/*.xml')
                junit(allowEmptyResults: false, keepLongStdio: true, testResults: "build/test-results/*.xml")
                stashCoverageReport()
              }
            }
          }
        }
        stage('Integration tests') {
          failFast true
          options { skipDefaultCheckout() }
          steps {
            withGithubNotify(context: 'Integration tests', tab: 'tests') {
              cleanup()
              dir("${BASE_DIR}") {
                script {
                  def basicTasks = [
                    'stack-command-default': generateTestCommandStage(command: 'test-stack-command-default', artifacts: ['build/elastic-stack-dump/stack/*/logs/*.log', 'build/elastic-stack-dump/stack/*/logs/fleet-server-internal/*']),
                    'stack-command-oldest': generateTestCommandStage(command: 'test-stack-command-oldest', artifacts: ['build/elastic-stack-dump/stack/*/logs/*.log', 'build/elastic-stack-dump/stack/*/logs/fleet-server-internal/*']),
                    'stack-command-7x': generateTestCommandStage(command: 'test-stack-command-7x', artifacts: ['build/elastic-stack-dump/stack/*/logs/*.log', 'build/elastic-stack-dump/stack/*/logs/fleet-server-internal/*']),
                    'stack-command-800': generateTestCommandStage(command: 'test-stack-command-800', artifacts: ['build/elastic-stack-dump/stack/*/logs/*.log', 'build/elastic-stack-dump/stack/*/logs/fleet-server-internal/*']),
                    'stack-command-8x': generateTestCommandStage(command: 'test-stack-command-8x', artifacts: ['build/elastic-stack-dump/stack/*/logs/*.log', 'build/elastic-stack-dump/stack/*/logs/fleet-server-internal/*']),
                    'check-packages-with-kind': generateTestCommandStage(command: 'test-check-packages-with-kind', artifacts: ['build/test-results/*.xml', 'build/kubectl-dump.txt', 'build/elastic-stack-dump/check-*/logs/*.log', 'build/elastic-stack-dump/check-*/logs/fleet-server-internal/*'], junitArtifacts: true, publishCoverage: true),
                    'check-packages-other': generateTestCommandStage(command: 'test-check-packages-other', artifacts: ['build/test-results/*.xml', 'build/elastic-stack-dump/check-*/logs/*.log', 'build/elastic-stack-dump/check-*/logs/fleet-server-internal/*'], junitArtifacts: true, publishCoverage: true),
                    'build-zip': generateTestCommandStage(command: 'test-build-zip', artifacts: ['build/elastic-stack-dump/build-zip/logs/*.log', 'build/integrations/*.sig']),
                    'profiles-command': generateTestCommandStage(command: 'test-profiles-command'),
                    'sign-with-elastic': generateTestSignWithElasticStage()
                  ]

                  def checkSinglePackageTasks = generateTestCheckSinglePackageStage(artifacts: ['build/test-results/*.xml', 'build/elastic-stack-dump/check-*/logs/*.log', 'build/elastic-stack-dump/check-*/logs/fleet-server-internal/*'], junitArtifacts: true, publishCoverage: true)
                  def tasks = basicTasks + checkSinglePackageTasks
                  parallel tasks
                }
              }
            }
          }
        }
        stage('Release') {
          when {
            tag pattern: '(v)?\\d+\\.\\d+\\.\\d+', comparator: 'REGEXP'
          }
          steps {
            dir("${BASE_DIR}"){
              withMageEnv(){
                withCredentials([string(credentialsId: "${GITHUB_TOKEN_CREDENTIALS}", variable: 'GITHUB_TOKEN')]) {
                  sh 'curl -sL https://git.io/goreleaser | bash'
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      publishCoverageReports()
    }
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}

def generateTestSignWithElasticStage() {
  return {
    withNode(labels: "ubuntu-20 && immutable", sleepMax: 20, forceWorkspace: true) {
      cleanup()
      dir("${BASE_DIR}"){
        withMageEnv(){
          sh(label: 'Install elastic-package',script: "make install")
          sh(label: 'Prepare for tests (build zipped packages)',script: "make build-unsigned-zip-for-tests")
          googleStorageUpload(bucket: env.INFRA_SIGNING_BUCKET_ARTIFACTS_PATH,
            credentialsId: env.INTERNAL_CI_JOB_GCS_CREDENTIALS,
            pathPrefix: 'build/integrations/',
            pattern: 'build/integrations/*.zip',
            sharedPublicly: false,
            showInline: true)
          withCredentials([string(credentialsId: env.JOB_SIGNING_CREDENTIALS, variable: 'TOKEN')]) {
            triggerRemoteJob(auth: CredentialsAuth(credentials: 'local-readonly-api-token'),
              job: 'https://internal-ci.elastic.co/job/elastic+unified-release+master+sign-artifacts-with-gpg',
              token: TOKEN,
              parameters: "gcs_input_path=${env.INFRA_SIGNING_BUCKET_ARTIFACTS_PATH}",
              useCrumbCache: true,
              useJobInfoCache: true)
          }
          googleStorageDownload(bucketUri: "${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_PATH}/*",
            credentialsId: env.INTERNAL_CI_JOB_GCS_CREDENTIALS,
            localDirectory: "${env.INTEGRATIONS_SIGNATURES_PATH}/",
            pathPrefix: "${env.INFRA_SIGNING_BUCKET_SIGNED_ARTIFACTS_SUBFOLDER}")
          sh(label: 'Rename .asc to .sig', script: 'for f in ' + "${env.INTEGRATIONS_SIGNATURES_PATH}" + '/*.asc; do mv "$f" "${f%.asc}.sig"; done')
          archiveArtifacts(artifacts: "${env.INTEGRATIONS_SIGNATURES_PATH}/*.sig")
        }
      }
    }
  }
}

def generateTestCheckSinglePackageStage(Map args = [:]) {
  def artifacts = args.get('artifacts') ? args.get('artifacts') : []
  def junitArtifacts = args.get('junitArtifacts') ? args.get('junitArtifacts') : false
  def publishCoverage = args.get('publishCoverage') ? args.get('publishCoverage') : false

  def integrations = [:]
  dir("test/packages/parallel") {
      // Include hack to skip temporary files with "@tmp" suffix.
      // For reference: https://issues.jenkins.io/browse/JENKINS-52750
      findFiles()?.findAll{ !it.name.endsWith('@tmp') }?.collect{ it.name }?.sort()?.each {
        integrations["check-package-${it}"] = {
         withNode(labels: "ubuntu-20 && immutable", sleepMax: 20, forceWorkspace: true) {
           cleanup()
           try {
             dir("${BASE_DIR}"){
               withMageEnv(){
                 withCloudTestEnv() {
                   sh(label: 'Install elastic-package',script: "make install")
                   sh(label: 'Build elastic-package',script: "make PACKAGE_UNDER_TEST=${it} test-check-packages-parallel")
                 }
               }
             }
           } finally {
             dir("${BASE_DIR}") {
               artifacts.each { artifact ->
                 archiveArtifacts(allowEmptyArchive: true, artifacts: "${artifact}")
               }

               if (junitArtifacts) {
                 junit(allowEmptyResults: true,
                  keepLongStdio: true,
                  testResults: "build/test-results/*.xml")
               }

               if (publishCoverage) {
                 stashCoverageReport()
               }
             }
           }
         }
        }
      }
  }
  return integrations
}

def generateTestCommandStage(Map args = [:]){
  def command = args.get('command')
  def artifacts = args.get('artifacts') ? args.get('artifacts') : []
  def junitArtifacts = args.get('junitArtifacts') ? args.get('junitArtifacts') : false
  def publishCoverage = args.get('publishCoverage') ? args.get('publishCoverage') : false

  return {
    withNode(labels: "ubuntu-20 && immutable", sleepMax: 20, forceWorkspace: true) {
      cleanup()
      try {
        dir("${BASE_DIR}"){
          withMageEnv(){
            withKubernetes() {
              withCloudTestEnv() {
                sh(label: 'Check',script: "make install ${command} check-git-clean")
              }
            }
          }
        }
      } finally {
        dir("${BASE_DIR}") {
          artifacts.each { artifact ->
            archiveArtifacts(allowEmptyArchive: true, artifacts: "${artifact}")
          }

          if (junitArtifacts) {
            junit(allowEmptyResults: true,
                keepLongStdio: true,
                testResults: "build/test-results/*.xml")
          }

          if (publishCoverage) {
            stashCoverageReport()
          }
        }
      }
    }
  }
}

def getCoverageBucketURI() {
  return "gs://${JOB_GCS_BUCKET}/" + getCoveragePathPrefix()
}

def getCoveragePathPrefix() {
  return "${env.JOB_NAME}-${env.BUILD_ID}/test-coverage/"
}

def publishCoverageReports() {
  stage('Publish coverage reports') {
    dir("${BASE_DIR}") {
      def bucketUri = getCoverageBucketURI() + "*.xml"
      googleStorageDownload(bucketUri: bucketUri, credentialsId: "${JOB_GCS_CREDENTIALS}", localDirectory: 'build/test-coverage', pathPrefix: getCoveragePathPrefix())
      coverageReport('build/test-coverage')
    }
  }
}

def stashCoverageReport() {
  r = sh(label: "isCoverageReportPresent", script: "ls build/test-coverage/*.xml", returnStatus: true)
  if (r != 0) {
    echo "isCoverageReportPresent: coverage files not found, report won't be stashed"
    return
  }

  googleStorageUploadExt(bucket: getCoverageBucketURI(), credentialsId: "${JOB_GCS_EXT_CREDENTIALS}", pattern: "build/test-coverage/*.xml")
}

def withKubernetes(Closure body) {
    retryWithSleep(retries: 2, seconds: 5, backoff: true) { sh(label: "Install kind", script: '''
       mkdir -p ${HOME}/bin
       curl -sSLo ${HOME}/bin/kind "https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64"
       chmod +x ${HOME}/bin/kind
       kind version
       ''') }
    retryWithSleep(retries: 2, seconds: 5, backoff: true) { sh(label: "Install kubectl", script: '''
       mkdir -p ${HOME}/bin
       curl -sSLo ${HOME}/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl"
       chmod +x ${HOME}/bin/kubectl
       kubectl version --client
       ''') }
    withEnv(["PATH+TOOLS=${HOME}/bin"]) {
      body()
    }
}

def withCloudTestEnv(Closure body) {
  def maskedVars = []
  // AWS
  def aws = getVaultSecret(secret: "${AWS_ACCOUNT_SECRET}").data
  if (!aws.containsKey('access_key')) {
    error("${AWS_ACCOUNT_SECRET} doesn't contain 'access_key'")
  }
  if (!aws.containsKey('secret_key')) {
    error("${AWS_ACCOUNT_SECRET} doesn't contain 'secret_key'")
  }
  maskedVars.addAll([
    [var: "AWS_ACCESS_KEY_ID", password: aws.access_key],
    [var: "AWS_SECRET_ACCESS_KEY", password: aws.secret_key],
  ])
  withEnvMask(vars: maskedVars) {
    body()
  }
}