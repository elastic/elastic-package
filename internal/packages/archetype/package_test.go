// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package archetype

import (
	"fmt"
	"path/filepath"
	"testing"

	"github.com/elastic/package-spec/v2/code/go/pkg/validator"

	"github.com/stretchr/testify/require"

	"github.com/elastic/elastic-package/internal/packages"
)

func TestPackage(t *testing.T) {
	t.Run("valid", func(t *testing.T) {
		pd := createPackageDescriptorForTest("integration", "^7.13.0")

		err := createAndCheckPackage(t, pd)
		require.NoError(t, err)
	})
	t.Run("missing-version", func(t *testing.T) {
		pd := createPackageDescriptorForTest("integration", "^7.13.0")
		pd.Manifest.Version = ""

		err := createAndCheckPackage(t, pd)
		require.Error(t, err)
	})
	t.Run("input-package", func(t *testing.T) {
		pd := createPackageDescriptorForTest("input", "^8.9.0")

		err := createAndCheckPackage(t, pd)
		require.NoError(t, err)
	})
}

func createAndCheckPackage(t *testing.T, pd PackageDescriptor) error {
	tempDir := t.TempDir()
	err := createPackageInDir(pd, tempDir)
	require.NoError(t, err)

	err = checkPackage(filepath.Join(tempDir, pd.Manifest.Name))
	return err
}

func createPackageDescriptorForTest(packageType, kibanaVersion string) PackageDescriptor {
	inputDataStreamType := ""
	if packageType == "input" {
		inputDataStreamType = "logs"
	}
	specVersion, err := GetLatestStableSpecVersion()
	if err != nil {
		panic(err)
	}
	return PackageDescriptor{
		Manifest: packages.PackageManifest{
			SpecVersion: specVersion.String(),
			Name:        "go_unit_test_package",
			Title:       "Go Unit Test Package",
			Type:        packageType,
			Version:     "1.2.3",
			Conditions: packages.Conditions{
				Kibana: packages.KibanaConditions{
					Version: kibanaVersion,
				},
				Elastic: packages.ElasticConditions{
					Subscription: "basic",
				},
			},
			Owner: packages.Owner{
				Github: "mtojek",
				Type:   "elastic",
			},
			Description: "This package has been generated by a Go unit test.",
			Categories:  []string{"aws", "custom"},
		},
		InputDataStreamType: inputDataStreamType,
	}
}

func checkPackage(packageRoot string) error {
	err := validator.ValidateFromPath(packageRoot)
	if err != nil {
		return fmt.Errorf("linting package failed: %w", err)
	}
	return nil
}
